from aiogram import Bot, types, Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

import os
import shutil 
from app.config import ROOT_ADMIN_ID
from app.cache import UserStateCache, UserState

router = Router()

# CallbackData –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ 'action'
class BrowserCallback(CallbackData, prefix="browse"):
    action: str
    index: int

class AdminActionCallback(CallbackData, prefix="admin_action"):
    action: str
    category_name: str

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã, —É–¥–∞–ª—è–µ–º –∏—Ö.
# async def show_files_for_deletion(...) - –£–î–ê–õ–ï–ù–û
# async def delete_file_by_index_callback(...) - –£–î–ê–õ–ï–ù–û

# –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤. –Ø —É–±—Ä–∞–ª –µ–µ –¥—É–±–ª–∏–∫–∞—Ç.
async def process_admin_file_upload(message: types.Message):
    cache = message.bot.user_state_cache
    user_id = message.from_user.id

    user_state, exist = await cache.get(user_id)
    if not exist:
        return
        
    try:
        action, category_name = user_state.pending_action.split(':', 1)
    except (ValueError, AttributeError):
        return
        
    if action != "waiting_for_file_upload":
        return

    file_id = None
    file_name = f"file_{message.message_id}"

    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"photo_{message.photo[-1].unique_id}.jpg"
    elif message.video:
        file_id = message.video.file_id
        file_name = message.video.file_name or f"video_{message.video.unique_id}.mp4"
    
    if not file_id: return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø–æ–¥–ø–∞–ø–∫—É
    dest_folder = os.path.join("files", category_name)
    if user_state.data and 'current_path' in user_state.data:
        dest_folder = user_state.data['current_path']

    os.makedirs(dest_folder, exist_ok=True)
    dest_path = os.path.join(dest_folder, file_name)

    try:
        file_info = await message.bot.get_file(file_id)
        await message.bot.download_file(file_info.file_path, destination=dest_path)
        await message.answer(f"‚úÖ –§–∞–π–ª <code>{file_name}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ <code>{os.path.basename(dest_folder)}</code>!", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º pending_action, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é
        user_state.pending_action = "browsing_files"
        await cache.set(user_id, user_state)


# --- –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def create_browser_keyboard_and_update_state(
    user_id: int,
    cache: UserStateCache,
    current_path: str,
    root_path: str
) -> InlineKeyboardBuilder | None:
    if not os.path.exists(current_path) or not os.path.isdir(current_path):
        return None

    builder = InlineKeyboardBuilder()

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    dirs = sorted([d for d in os.listdir(current_path) if os.path.isdir(os.path.join(current_path, d))])
    files = sorted([f for f in os.listdir(current_path) if os.path.isfile(os.path.join(current_path, f))])
    items_on_screen = dirs + files

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫—ç—à–µ
    user_state, _ = await cache.get(user_id)
    if not user_state:
        user_state = UserState(pending_action="browsing_files", role=None, data={})
    
    user_state.data['current_path'] = current_path
    user_state.data['root_path'] = root_path
    user_state.data['items'] = items_on_screen
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'view'
    mode = user_state.data.get('mode', 'view')
    await cache.set(user_id, user_state)

    # 3. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == 'delete':
        # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
        builder.button(text="‚Ü©Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=BrowserCallback(action="cancel_delete", index=-1).pack())
        for i, item_name in enumerate(items_on_screen):
            icon = "üìÅ" if i < len(dirs) else "üìÑ"
            # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ: –∏–º—è –∏ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            builder.button(text=f"{icon} {item_name}", callback_data=BrowserCallback(action="info", index=i).pack())
            builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=BrowserCallback(action="delete", index=i).pack())
        builder.adjust(1, 2) # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã - –æ–¥–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –¥–≤–µ
    else:
        # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---
        if current_path != root_path:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BrowserCallback(action="back", index=-1).pack())

        for i, dirname in enumerate(dirs):
            builder.button(text=f"üìÅ {dirname}", callback_data=BrowserCallback(action="nav", index=i).pack())

        for i, filename in enumerate(files):
            file_index = len(dirs) + i
            builder.button(text=f"üìÑ {filename}", callback_data=BrowserCallback(action="send", index=file_index).pack())
        builder.adjust(1)

    has_buttons = any(True for _ in builder.buttons)
    return builder if has_buttons else None


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–î–ú–ò–ù–°–ö–ò–• –î–ï–ô–°–¢–í–ò–ô ---
@router.callback_query(AdminActionCallback.filter())
async def handle_admin_action(callback: types.CallbackQuery, callback_data: AdminActionCallback):
    action = callback_data.action
    category_name = callback_data.category_name
    cache = callback.bot.user_state_cache
    user_id = callback.from_user.id

    root_path = os.path.join("files", category_name)
    if not os.path.exists(root_path):
        os.makedirs(root_path)

    if action == "view":
        user_state, _ = await cache.get(user_id)
        if user_state:
            user_state.data['mode'] = 'view'
            await cache.set(user_id, user_state)
        
        builder = await create_browser_keyboard_and_update_state(user_id, cache, root_path, root_path)
        if builder:
            await callback.message.edit_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä: <code>{category_name}</code>", reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category_name}¬ª –ø—É—Å—Ç–∞.")

    elif action == "upload":
        user_state, _ = await cache.get(user_id)
        current_path = user_state.data.get('current_path', root_path) if user_state and user_state.data else root_path
        
        await cache.update_action(user_id, f"waiting_for_file_upload:{category_name}")
        
        folder_name = os.path.basename(current_path)
        await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–ø–∫—É <code>{folder_name}</code>.", parse_mode="HTML")

    elif action == "delete":
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
        user_state, _ = await cache.get(user_id)
        if not user_state:
             user_state = UserState(pending_action="browsing_files", role=None, data={})
        user_state.data['mode'] = 'delete'
        await cache.set(user_id, user_state)

        builder = await create_browser_keyboard_and_update_state(user_id, cache, root_path, root_path)
        if builder:
            await callback.message.edit_text(f"<b>–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <code>{category_name}</code>:", reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            await callback.message.edit_text(f"–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_name}¬ª.")

    await callback.answer()

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–í–ò–ì–ê–¶–ò–ò ---
@router.callback_query(BrowserCallback.filter())
async def handle_browser_navigation(callback: types.CallbackQuery, callback_data: BrowserCallback, bot: Bot):
    cache = callback.bot.user_state_cache
    user_id = callback.from_user.id

    user_state, exist = await cache.get(user_id)
    if not exist or 'items' not in user_state.data or 'current_path' not in user_state.data:
        await callback.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await callback.message.delete()
        return

    action = callback_data.action
    index = callback_data.index
    current_path = user_state.data['current_path']
    root_path = user_state.data['root_path']
    items_on_screen = user_state.data.get('items', [])

    path_to_open = ""
    if action not in ['back', 'cancel_delete', 'info']:
        if not (0 <= index < len(items_on_screen)):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
            return
        item_name = items_on_screen[index]
        path_to_open = os.path.join(current_path, item_name)

    # --- –ù–æ–≤—ã–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    if action == "delete":
        try:
            if os.path.isfile(path_to_open):
                os.remove(path_to_open)
                await callback.answer(f"–§–∞–π–ª '{os.path.basename(path_to_open)}' —É–¥–∞–ª–µ–Ω.")
            elif os.path.isdir(path_to_open):
                shutil.rmtree(path_to_open)
                await callback.answer(f"–ü–∞–ø–∫–∞ '{os.path.basename(path_to_open)}' –∏ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã.")
            else:
                await callback.answer("–û–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            builder = await create_browser_keyboard_and_update_state(user_id, cache, current_path, root_path)
            if builder:
                await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
            else:
                await callback.message.edit_text(f"–ü–∞–ø–∫–∞ <code>{os.path.basename(current_path)}</code> –ø—É—Å—Ç–∞.")

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", show_alert=True)
        return

    elif action == "cancel_delete":
        user_state.data['mode'] = 'view'
        await cache.set(user_id, user_state)
        builder = await create_browser_keyboard_and_update_state(user_id, cache, current_path, root_path)
        await callback.message.edit_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä: <code>{os.path.basename(current_path)}</code>", reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer("–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
        return
    
    elif action == "info":
        await callback.answer("–ù–∞–∂–º–∏—Ç–µ '‚ùå –£–¥–∞–ª–∏—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # --- –°—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    if action == "back":
        path_to_open = os.path.dirname(current_path)
    
    if action == "send":
        if not os.path.isfile(path_to_open):
            await callback.answer("–û—à–∏–±–∫–∞: —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª.", show_alert=True)
            return
        await bot.send_document(chat_id=user_id, document=FSInputFile(path_to_open))
        await callback.answer()
        return

    elif action in ["nav", "back"]:
        if not os.path.isdir(path_to_open):
            await callback.answer("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        builder = await create_browser_keyboard_and_update_state(user_id, cache, path_to_open, root_path)
        if builder:
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        else:
            await callback.message.edit_text(f"–ü–∞–ø–∫–∞ <code>{os.path.basename(path_to_open)}</code> –ø—É—Å—Ç–∞.")
        await callback.answer()

# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –û–ë–´–ß–ù–´–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
# –û–Ω–∞ –Ω–µ –¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_files(category_name: str, message: types.Message) -> InlineKeyboardBuilder | None:
    folder_path = os.path.join("files", category_name)
    cache = message.bot.user_state_cache
    user_id = message.from_user.id

    if not os.path.exists(folder_path) or not os.listdir(folder_path):
        sent = await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        await cache.add_message(user_id, sent)
        return None

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏
    builder = await create_browser_keyboard_and_update_state(
        user_id, cache, folder_path, folder_path
    )

    return builder