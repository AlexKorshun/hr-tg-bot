from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
'''
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)'''
from app.uuid.uuid import new_uuid
from app.hash.hash import hash_string, verify_string

from app.repository.pg import *
from app.models.user import TelegramID, Role
from app.config import ROOT_ADMIN_ID
from app.cache import *

from app.handlers.keyboard import kb, kbAdmin

import app.metrics.metrics as metrics

async def start_cmd(message: types.Message, state: FSMContext):
    cache = message.bot.user_state_cache
    user_id = message.from_user.id

    await init_pool()

    telegram_id = TelegramID(message.from_user.id)
    user = await get_user_by_id(telegram_id)

    if user:
        if str(message.from_user.id) in ROOT_ADMIN_ID:
            await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!", reply_markup=kbAdmin)
        else:
            await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!", reply_markup=kb)
    else:
        full_name = " ".join(
            filter(None, (message.from_user.first_name, message.from_user.last_name))
        )
        username = message.from_user.username or ""

        if str(message.from_user.id) in ROOT_ADMIN_ID:
            await create_user(
                telegram_id,
                username,
                full_name,
                role=Role.ADMIN,
                email=""
            )
            metrics.users_registered_total.inc()

            await message.answer("üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=kb)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É")
            await cache.update_action(user_id, "waiting_for_email_user")



async def handle_add_user_btn(message: types.Message, state: FSMContext):
    if str(message.from_user.id) not in ROOT_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    sent = await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    cache = message.bot.user_state_cache
    user_id = message.from_user.id
    user_state, exists = await cache.get(user_id)
    if not exists:
        user_state = UserState(
            pending_action="",
            role=None,
            messages=[]
        )

    user_state.pending_action = "waiting_for_email_admin"
    user_state.messages.append(sent)
    await cache.set(user_id, user_state)


async def handle_admin_email_input(message: types.Message, state: FSMContext):
    cache = message.bot.user_state_cache
    user_id = message.from_user.id

    await cache.add_message(user_id, message)

    if str(message.from_user.id) not in ROOT_ADMIN_ID:
        sent = await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await cache.add_message(user_id, sent)
        return 
    email = message.text.strip()
    
    pass_string = new_uuid()

    hashed_pass_string = hash_string(pass_string)

    await create_hash(email, hashed_pass_string)


    await cache.delete(user_id)

    sent = await message.answer(f"üì© –°—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {pass_string}")
    await cache.add_message(user_id, sent)

async def handle_email_user_input(message: types.Message, state: FSMContext):
    cache = message.bot.user_state_cache
    user_id = message.from_user.id

    await cache.add_message(user_id, message)
    email = message.text.strip()
    
    await state.update_data(email=email)  

    sent = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å(–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á—Ç—å —É –∞–¥–º–∏–Ω–∞)")
    await cache.add_message(user_id, sent)

    await cache.update_action(user_id, "waiting_for_pass_string")


async def handle_password_user_input(message: types.Message, state: FSMContext):
    cache = message.bot.user_state_cache
    user_id = message.from_user.id

    await cache.add_message(user_id, message)
    data = await state.get_data()
    email = str(data.get("email"))

    pass_string = message.text.strip()
    stored_hash = await get_pass_hash_by_email(email)


    if stored_hash is None:
        sent = await message.answer("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await cache.add_message(user_id, sent)
        await cache.delete(user_id)
        return
    
    await cache.delete(user_id)
    password_hash, used = stored_hash
    if verify_string(pass_string, password_hash):
        full_name = " ".join(
            filter(None, (message.from_user.first_name, message.from_user.last_name))
        )
        username = message.from_user.username or ""

        role = await get_pass_role_by_email(email)
        await create_user(
                user_id,
                username,
                full_name,
                role=Role(role),
                email=email
            )
        metrics.users_registered_total.inc()
        sent = await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await cache.add_message(user_id, sent)
        await set_password_used(email)

        

        await message.answer(
'''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç-–±–æ—Ç!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
üß≠ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä
üéì –ò–∑—É—á–∏—Ç—å –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã
üìÑ –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π –∏–ª–∏ —Å–ø—Ä–∞–≤–∫–∏
‚ùì –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ FAQ
üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
‚è∞ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá''', reply_markup=kb)
    else:
        sent = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        await cache.add_message(user_id, sent)

    await state.clear()
